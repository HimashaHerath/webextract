name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        playwright install chromium --with-deps

    - name: Verify installation
      run: |
        python -c "import webextract; print(f'âœ… WebExtract {webextract.__version__} imported successfully')"
        python -c "from webextract.core.llm_factory import get_available_providers; print(f'Available providers: {list(get_available_providers().keys())}')"

    - name: Run tests
      run: |
        xvfb-run -a pytest tests/ -v --tb=short --color=yes
      env:
        PYTEST_ADDOPTS: "--strict-markers --strict-config"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest.log
          test-results.xml

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/pyproject.toml') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy

    - name: Check code formatting
      run: |
        echo "::group::Black formatting check"
        black --check --diff webextract/ examples/
        echo "::endgroup::"

    - name: Check import sorting
      run: |
        echo "::group::Import sorting check"
        isort --check-only --diff webextract/ examples/
        echo "::endgroup::"

    - name: Lint with flake8
      run: |
        echo "::group::Flake8 linting"
        flake8 webextract/ --config .flake8
        echo "::endgroup::"

    - name: Type checking
      continue-on-error: true
      run: |
        echo "::group::MyPy type checking"
        mypy webextract/ --ignore-missing-imports --no-strict-optional
        echo "::endgroup::"

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml]

    - name: Check dependencies for vulnerabilities
      run: |
        echo "::group::Safety check"
        safety check --json --output safety-report.json || echo "Security vulnerabilities found"
        echo "::endgroup::"
      continue-on-error: true

    - name: Run security linter
      run: |
        echo "::group::Bandit security analysis"
        bandit -r webextract/ -f json -o bandit-report.json || echo "Security issues found"
        echo "::endgroup::"
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        echo "::group::Building package"
        python -m build
        echo "::endgroup::"

    - name: Check package
      run: |
        echo "::group::Package validation"
        twine check dist/*
        echo "::endgroup::"

    - name: List package contents
      run: |
        echo "::group::Package contents"
        ls -la dist/
        tar -tzf dist/*.tar.gz | head -20
        echo "::endgroup::"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 7
